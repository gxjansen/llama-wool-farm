version: '3.8'

services:
  # API Gateway
  api-gateway:
    build: 
      context: ./services/api-gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://mongodb:27017/llamawoolfarm
    depends_on:
      - redis
      - mongodb
      - game-service
      - player-service
      - leaderboard-service
    networks:
      - llama-network
    restart: unless-stopped

  # Game Service (Core game logic)
  game-service:
    build:
      context: ./services/game-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3001
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://mongodb:27017/llamawoolfarm
      - SERVICE_NAME=game-service
    depends_on:
      - redis
      - mongodb
    networks:
      - llama-network
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Player Service (User management)
  player-service:
    build:
      context: ./services/player-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3002
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://mongodb:27017/llamawoolfarm
      - SERVICE_NAME=player-service
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - redis
      - mongodb
    networks:
      - llama-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Leaderboard Service
  leaderboard-service:
    build:
      context: ./services/leaderboard-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3003
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://mongodb:27017/llamawoolfarm
      - SERVICE_NAME=leaderboard-service
    depends_on:
      - redis
      - mongodb
    networks:
      - llama-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # WebSocket Service (Real-time communication)
  websocket-service:
    build:
      context: ./services/websocket-service
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - PORT=3004
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://mongodb:27017/llamawoolfarm
      - SERVICE_NAME=websocket-service
    depends_on:
      - redis
      - mongodb
    networks:
      - llama-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Analytics Service
  analytics-service:
    build:
      context: ./services/analytics-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3005
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://mongodb:27017/llamawoolfarm
      - SERVICE_NAME=analytics-service
    depends_on:
      - redis
      - mongodb
    networks:
      - llama-network
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Background Jobs Service
  jobs-service:
    build:
      context: ./services/jobs-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://mongodb:27017/llamawoolfarm
      - SERVICE_NAME=jobs-service
    depends_on:
      - redis
      - mongodb
    networks:
      - llama-network
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=llamawoolfarm
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - llama-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - llama-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - api-gateway
      - websocket-service
    networks:
      - llama-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - llama-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - llama-network
    restart: unless-stopped

  # Health Check Service
  health-check:
    build:
      context: ./services/health-check
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - SERVICES_TO_CHECK=api-gateway,game-service,player-service,leaderboard-service,websocket-service
    depends_on:
      - api-gateway
      - game-service
      - player-service
      - leaderboard-service
      - websocket-service
    networks:
      - llama-network
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  llama-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
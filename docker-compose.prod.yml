# Production Docker Compose Configuration
version: '3.8'

services:
  # Frontend Service (Production)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: llama-frontend-prod
    volumes:
      - ./dist:/app/dist:ro
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=https://api.yourdomain.com
    networks:
      - llama-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend Service (Production)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: llama-backend-prod
    environment:
      - NODE_ENV=production
      - PORT=4000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - redis
    networks:
      - llama-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: npm start

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: llama-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - frontend
      - backend
    networks:
      - llama-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Production)
  redis:
    image: redis:7-alpine
    container_name: llama-redis-prod
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - llama-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server /etc/redis/redis.conf

  # Log aggregation (Production)
  logspout:
    image: gliderlabs/logspout:latest
    container_name: llama-logspout
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - ROUTE_URIS=syslog://logs.papertrailapp.com:XXXXX
    networks:
      - llama-network
    restart: unless-stopped

networks:
  llama-network:
    driver: bridge

volumes:
  redis-data:
    driver: local